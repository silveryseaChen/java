package com.chy.sort;

import java.util.Arrays;
import java.util.Random;

/**
 * Created by chy on 2018/12/1.
 * 常见排序
 * https://www.cnblogs.com/onepixel/p/7674659.html
 */
public class Base {

    /**
     *
     * 稳定：如果a原本在b前面，而a=b，排序之后a仍然在b的前面。
     * 不稳定：如果a原本在b的前面，而a=b，排序之后 a 可能会出现在 b 的后面。
     * 时间复杂度：对排序数据的总的操作次数。反映当n变化时，操作次数呈现什么规律。
     * 空间复杂度：是指算法在计算机内执行时所需存储空间的度量，它也是数据规模n的函数。
     */

    static final int[] ARRAY = {858, 992, 497, 717, 710, 112, 19, 581, 572, 368, 987, 42, 882, 433, 64, 314, 894, 546, 612, 669, 554, 667, 612, 383, 931, 237, 566, 558, 488, 41, 803, 450, 991, 817, 564, 283, 363, 639, 48, 100, 922, 32, 507, 539, 715, 556, 147, 753, 813, 349, 916, 332, 306, 377, 147, 526, 994, 909, 352, 578, 332, 992, 372, 435, 903, 322, 186, 545, 135, 431, 914, 1, 59, 532, 48, 463, 915, 301, 740, 419, 31, 288, 898, 693, 987, 578, 897, 6, 535, 43, 233, 101, 906, 280, 869, 650, 22, 366, 313, 898};
//    static final int[] ARRAY = new int[]{5, 3, 7, 6, 3, 2, 8, 9};

    public static void main(String[] args) {

        print(ARRAY);

//        BubbleSort.sort(ARRAY);
//        1, 6, 19, 22, 31, 32, 41, 42, 43, 48, 48, 59, 64, 100, 101, 112, 135, 147, 147, 186, 233, 237, 280, 283, 288, 301, 306, 313, 314, 322, 332, 332, 349, 352, 363, 366, 368, 372, 377, 383, 419, 431, 433, 435, 450, 463, 488, 497, 507, 526, 532, 535, 539, 545, 546, 554, 556, 558, 564, 566, 572, 578, 578, 581, 612, 612, 639, 650, 667, 669, 693, 710, 715, 717, 740, 753, 803, 813, 817, 858, 869, 882, 894, 897, 898, 898, 903, 906, 909, 914, 915, 916, 922, 931, 987, 987, 991, 992, 992, 994
//        循环次数：4950, 交换次数：2700

//        SelectionSort.sort(ARRAY);
//        1, 6, 19, 22, 31, 32, 41, 42, 43, 48, 48, 59, 64, 100, 101, 112, 135, 147, 147, 186, 233, 237, 280, 283, 288, 301, 306, 313, 314, 322, 332, 332, 349, 352, 363, 366, 368, 372, 377, 383, 419, 431, 433, 435, 450, 463, 488, 497, 507, 526, 532, 535, 539, 545, 546, 554, 556, 558, 564, 566, 572, 578, 578, 581, 612, 612, 639, 650, 667, 669, 693, 710, 715, 717, 740, 753, 803, 813, 817, 858, 869, 882, 894, 897, 898, 898, 903, 906, 909, 914, 915, 916, 922, 931, 987, 987, 991, 992, 992, 994
//        循环次数：4950, 交换次数：98

//        InsertionSort.sort(ARRAY);
//        1, 6, 19, 22, 31, 32, 41, 42, 43, 48, 48, 59, 64, 100, 101, 112, 135, 147, 147, 186, 233, 237, 280, 283, 288, 301, 306, 313, 314, 322, 332, 332, 349, 352, 363, 366, 368, 372, 377, 383, 419, 431, 433, 435, 450, 463, 488, 497, 507, 526, 532, 535, 539, 545, 546, 554, 556, 558, 564, 566, 572, 578, 578, 581, 612, 612, 639, 650, 667, 669, 693, 710, 715, 717, 740, 753, 803, 813, 817, 858, 869, 882, 894, 897, 898, 898, 903, 906, 909, 914, 915, 916, 922, 931, 987, 987, 991, 992, 992, 994
//        循环次数：2700, 交换次数：2700

//        ShellSort.sort(ARRAY);
//        1, 6, 19, 22, 31, 32, 41, 42, 43, 48, 48, 59, 64, 100, 101, 112, 135, 147, 147, 186, 233, 237, 280, 283, 288, 301, 306, 313, 314, 322, 332, 332, 349, 352, 363, 366, 368, 372, 377, 383, 419, 431, 433, 435, 450, 463, 488, 497, 507, 526, 532, 535, 539, 545, 546, 554, 556, 558, 564, 566, 572, 578, 578, 581, 612, 612, 639, 650, 667, 669, 693, 710, 715, 717, 740, 753, 803, 813, 817, 858, 869, 882, 894, 897, 898, 898, 903, 906, 909, 914, 915, 916, 922, 931, 987, 987, 991, 992, 992, 994
//        循环次数：2700, 交换次数：2700

//        MergeSort.sort(ARRAY, 0, 99);
//        1, 6, 19, 22, 31, 32, 41, 42, 43, 48, 48, 59, 64, 100, 101, 112, 135, 147, 147, 186, 233, 237, 280, 283, 288, 301, 306, 313, 314, 322, 332, 332, 349, 352, 363, 366, 368, 372, 377, 383, 419, 431, 433, 435, 450, 463, 488, 497, 507, 526, 532, 535, 539, 545, 546, 554, 556, 558, 564, 566, 572, 578, 578, 581, 612, 612, 639, 650, 667, 669, 693, 710, 715, 717, 740, 753, 803, 813, 817, 858, 869, 882, 894, 897, 898, 898, 903, 906, 909, 914, 915, 916, 922, 931, 987, 987, 991, 992, 992, 994
//        循环次数：672, 交换次数：672

//        QuickSort.sort(ARRAY, 0, 100);
//        [1, 6, 19, 22, 31, 32, 41, 42, 43, 48, 48, 59, 64, 100, 101, 112, 135, 147, 147, 186, 233, 237, 280, 283, 288, 301, 306, 313, 314, 322, 332, 332, 349, 352, 363, 366, 368, 372, 377, 383, 419, 431, 433, 435, 450, 463, 488, 497, 507, 526, 532, 535, 539, 545, 546, 554, 556, 558, 564, 566, 572, 578, 578, 581, 612, 612, 639, 650, 667, 669, 693, 710, 715, 717, 740, 753, 803, 813, 817, 858, 869, 882, 894, 897, 898, 898, 903, 906, 909, 914, 915, 916, 922, 931, 987, 987, 991, 992, 992, 994]
//        循环次数：623, 交换次数：353

//        HeapSort.sort(ARRAY, 0, 100);
//        [1, 6, 19, 22, 31, 32, 41, 42, 43, 48, 48, 59, 64, 100, 101, 112, 135, 147, 147, 186, 233, 237, 280, 283, 288, 301, 306, 313, 314, 322, 332, 332, 349, 352, 363, 366, 368, 372, 377, 383, 419, 431, 433, 435, 450, 463, 488, 497, 507, 526, 532, 535, 539, 545, 546, 554, 556, 558, 564, 566, 572, 578, 578, 581, 612, 612, 639, 650, 667, 669, 693, 710, 715, 717, 740, 753, 803, 813, 817, 858, 869, 882, 894, 897, 898, 898, 903, 906, 909, 914, 915, 916, 922, 931, 987, 987, 991, 992, 992, 994]
//        循环次数：3633, 交换次数：2053

//        CountingSort.sort(ARRAY, 1, 1000);
//        [1, 6, 19, 22, 31, 32, 41, 42, 43, 48, 48, 59, 64, 100, 101, 112, 135, 147, 147, 186, 233, 237, 280, 283, 288, 301, 306, 313, 314, 322, 332, 332, 349, 352, 363, 366, 368, 372, 377, 383, 419, 431, 433, 435, 450, 463, 488, 497, 507, 526, 532, 535, 539, 545, 546, 554, 556, 558, 564, 566, 572, 578, 578, 581, 612, 612, 639, 650, 667, 669, 693, 710, 715, 717, 740, 753, 803, 813, 817, 858, 869, 882, 894, 897, 898, 898, 903, 906, 909, 914, 915, 916, 922, 931, 987, 987, 991, 992, 992, 994]
//        循环次数：200, 交换次数：0


//        BucketSort.sort(ARRAY, 1, 1000);
//        [1, 6, 19, 22, 31, 32, 41, 42, 43, 48, 48, 59, 64, 100, 101, 112, 135, 147, 147, 186, 233, 237, 280, 283, 288, 301, 306, 313, 314, 322, 332, 332, 349, 352, 363, 366, 368, 372, 377, 383, 419, 431, 433, 435, 450, 463, 488, 497, 507, 526, 532, 535, 539, 545, 546, 554, 556, 558, 564, 566, 572, 578, 578, 581, 612, 612, 639, 650, 667, 669, 693, 710, 715, 717, 740, 753, 803, 813, 817, 858, 869, 882, 894, 897, 898, 898, 903, 906, 909, 914, 915, 916, 922, 931, 987, 987, 991, 992, 992, 994]

        RadixSort.sort(ARRAY, 999);
//[1, 6, 19, 22, 31, 32, 41, 42, 43, 48, 48, 59, 64, 100, 101, 112, 135, 147, 147, 186, 233, 237, 280, 283, 288, 301, 306, 313, 314, 322, 332, 332, 349, 352, 363, 366, 368, 372, 377, 383, 419, 431, 433, 435, 450, 463, 488, 497, 507, 526, 532, 535, 539, 545, 546, 554, 556, 558, 564, 566, 572, 578, 578, 581, 612, 612, 639, 650, 667, 669, 693, 710, 715, 717, 740, 753, 803, 813, 817, 858, 869, 882, 894, 897, 898, 898, 903, 906, 909, 914, 915, 916, 922, 931, 987, 987, 991, 992, 992, 994]
    }

    public static void swap(int[] a, int m, int n){
        int t = a[m];
        a[m] = a[n];
        a[n] = t;
        System.out.println(Arrays.toString(a));
    }

    public static void initArray() {
        Random random = new Random();
        StringBuilder sb = new StringBuilder();
        for (int i=0;i<100; i++) {
            int r = random.nextInt(1000);
            sb.append(r+", ");
            System.out.println(r);
        }
        System.out.println(sb.toString());
    }

    public static void print(int[] a){
        System.out.println(Arrays.toString(a));
    }

}
